# -*- coding: utf-8 -*-
"""2ndminor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_6hEcQVwiUjJSJ-uNn2hj12Gl6aODCbe

Name - Dhanyashree P S
"""

import numpy as np
import pandas as pd

"""**REDDIT** **DATA**"""

df = pd.read_csv('Reddit_Data.csv')
df

df.shape

x = df['clean_comment']
y = df['category']

x

y

y.value_counts()

# count vectoriser
from sklearn.feature_extraction.text import CountVectorizer
vectorizer = CountVectorizer()
x= vectorizer.fit_transform(x.apply(lambda x: np.str_(x)))

x

# splitting the dataset
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test=train_test_split(x,y,random_state=42,test_size=0.2)

# machine learning classifications models

# decison tree classification
from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=42)
clf.fit(x_train,y_train)

y_pred = clf.predict(x_test)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_pred,y_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_pred,y_test)*100

# Naive bayes
from sklearn.naive_bayes import MultinomialNB
nb = MultinomialNB()
nb.fit(x_train,y_train)

y_pred = nb.predict(x_test)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_pred,y_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_pred,y_test)*100

# logic regression
from sklearn.linear_model import LogisticRegression
lr = LogisticRegression(random_state=0)
lr.fit(x_train,y_train)

y_pred = lr.predict(x_test)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_pred,y_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_pred,y_test)*100

# random forest classification
from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(max_depth=50, random_state=0)
rf.fit(x_train,y_train)

y_pred = rf.predict(x_test)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_pred,y_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_pred,y_test)*100